@page "/slidebar4"

<PageTitle>Slidebar 4</PageTitle>

<Banner Title="Interesting left menu hide" Link="https://codepen.io/azer-hesim/pen/bPbjLj" LinkText="slidebar" />
https://speckyboy.com/slide-out-sidebars/

    <div class="container bar">
        <label class="floatLeft" for="navBtn"><span></span></label>
        <span class="floatRight paddingRight2rem">
            Sidebar Navigation made without JavaScript - only CSS! 
            <b><a href="http://ninety-niners.com">Ninety-Niners.com</a></b>
        </span>
    </div>
   <div class="container">
        <input type="checkbox" class="navBtn" id="navBtn" />
        <nav>
            <ul>
                <li>
                    <a href="#"><i class="fa fa-heart"></i>First Link</a>
                </li>
                <li>
                    <a href="#"><i class="fa fa-medkit"></i>Second Link</a>
                </li>
                <li>
                    <a href="#"><i class="fa fa-heartbeat"></i>Third Link</a>
                </li>
                <li>
                    <a href="#"><i class="fa fa-ambulance"></i>Forth Link</a>
                </li>
            </ul>
        </nav>
    </div>


    .myclass {
  background-color: @if (isBlue) { blue } else { red };
}


@page "/color-changer"

<style>
  @import "mystyle.css";
</style>

<h1>Color Changer</h1>

<button @onclick="ChangeColor">Change Color</button>

@code {
  private bool isBlue = true;

  private void ChangeColor()
  {
    isBlue = !isBlue;
  }
}









To change the width of a CSS style in a Blazor program, you can use the following code:

First, create a CSS file with the style you want to change. In this example, we'll create a file called "mystyle.css" with a class called "myclass" that sets the width to 200px:


.myclass {
  width: 200px;
}

Next, create a Blazor component called "WidthChanger" that contains a text box to enter a new width value and a button to apply the new value. Here's the code for the component:

@page "/width-changer"

<style>
  @import "mystyle.css";
</style>

<h1>Width Changer</h1>

<label for="width-input">New Width:</label>
<input type="text" id="width-input" @bind-value="newWidth" />

<button @onclick="ChangeWidth">Apply</button>

@code {
  private string newWidth = "";

  private void ChangeWidth()
  {
    if (int.TryParse(newWidth, out int result))
    {
      StyleBuilder styleBuilder = new StyleBuilder();
      styleBuilder.Width(result, StyleUnit.Pixel);
      StyleRenderer styleRenderer = new StyleRenderer();
      string newStyle = styleRenderer.BuildStyle(styleBuilder);
      JSRuntime.InvokeVoidAsync("changeWidth", newStyle);
   
    
    }
  }
}


This component imports the "mystyle.css" file, which contains the "myclass" style we want to change. The component also contains a text box with a bound value to store the new width entered by the user, and a button with an "onclick" event that calls the "ChangeWidth" method when clicked.

In the code section of the component, we define a string variable called "newWidth" that will store the new width entered by the user. The "ChangeWidth" method first checks if the new width value can be parsed to an integer. If it can, the method uses the Blazor "StyleBuilder" and "StyleRenderer" classes to create a new style with the specified width value. The "JSRuntime.InvokeVoidAsync" method is then used to call a JavaScript function called "changeWidth" with the new style as an argument.

Finally, we create the "changeWidth" JavaScript function in the index.html file of the Blazor app. Here's the code for the function:


<script>
  function changeWidth(newStyle) {
    var elements = document.getElementsByClassName("myclass");
    for (var i = 0; i < elements.length; i++) {
      elements[i].setAttribute("style", newStyle);
    }
  }
</script>





This function uses the "getElementsByClassName" method to find all elements with the "myclass" class, and then loops through each element and sets its style attribute to the new style passed as an argument.

That's it! Now when you enter a new width value in the text box and click the "Apply" button in the WidthChanger component, the width of any elements with the "myclass" class will be updated to the new value.


























@*@import url(https://fonts.googleapis.com/css?family=PT+Sans:400,400italic,700,700italic);*@
<style>
/* ==========================================================================
Google Fonts
========================================================================== */
/* ==========================================================================
clearfix
========================================================================== */
.cf:before,
.cf:after {
  content: " ";
  /* 1 */
  display: table;
  /* 2 */
}

.cf:after {
  clear: both;
}

.cf {
  *zoom: 1;
}

/* ==========================================================================
html, body and stuff
========================================================================== */
*, *:before, *:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}

body {
  font-size: 100%;
  font-family: 'PT Sans', sans-serif;
  background-color: #f3f3f3;
}

/* ==========================================================================
text
========================================================================== */
.left {
  text-align: left;
}

.center {
  text-align: center;
}

.right {
  text-align: right;
}

.justify {
  text-align: justify;
}

.uppercase {
  text-transform: uppercase;
}

/* ==========================================================================
padding / margin
========================================================================== */
.padding1rem {
  padding: 1rem;
}

.paddingRight2rem {
  padding: 0 2rem 0 0;
}

/* ==========================================================================
links
========================================================================== */
a {
  color: white;
}

/* ==========================================================================
headlines
========================================================================== */
/* ==========================================================================
awesome Fonts
========================================================================== */
i {
  color: #d1d4d9;
  margin: 0 1rem 0 0;
}

/* ==========================================================================
layout
========================================================================== */
.container {
  max-width: 100%;
  margin: 0 auto;
  overflow: hidden;
}

.floatLeft {
  float: left;
}

.floatRight {
  float: right;
}

.posAbs {
  position: absolute;
}

.third {
  width: 33.3333%;
}

.half {
  width: 50%;
}

.twoThird {
  width: 66.6666%;
}

.quarter {
  width: 25%;
}

label {
  cursor: pointer;
  border-right: 1px solid #d1d4d9;
  display: block;
  height: 4rem;
  width: 4rem;
  position: relative;
}
label span {
  border-radius: 15%;
  height: 3px;
  width: 32px;
  background-color: white;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateY(-50%) translateX(-50%);
  transition: all 0.3s ease-out;
}
label span:before {
  border-radius: 15%;
  position: absolute;
  content: "";
  height: 100%;
  width: 100%;
  background-color: white;
  top: 400%;
  transition: all 0.3s ease-out;
}
label span:after {
  border-radius: 15%;
  position: absolute;
  content: "";
  height: 100%;
  width: 100%;
  background-color: white;
  top: -400%;
  transition: all 0.3s ease-out;
}

label:hover span {
  height: 0;
  transition: all 0.3s ease-out;
}
label:hover span:before {
  height: 3px;
  transform: rotate(-45deg);
  transition: all 0.3s ease-out;
}
label:hover span:after {
  height: 3px;
  transform: rotate(45deg);
  transition: all 0.3s ease-out;
}

.bar {
  color: white;
  background-color: #4a4e54;
  line-height: 4rem;
  border: 1px solid grey;
}

nav {
  border-left: 1px solid #d1d4d9;
  border-right: 1px solid #d1d4d9;
  border-bottom: 1px solid #d1d4d9;
  max-width: 300px;
  background-color: white;
  transform: translateX(-100%) scale(1, 0.1);
  transform-origin: top left;
  transition: all 0.3s ease-out;
}
nav ul {
  margin: 0;
  padding: 0;
  list-style: none;
}
nav ul li {
  border-top: 1px solid #efefef;
  opacity: 0;
  transform: translateX(-100%);
  transition: all 0.6s ease-out;
}
nav ul li a {
  transition: all 0.3s ease-out;
  line-height: 1rem;
  text-decoration: none;
  color: #8a8d92;
  display: block;
  padding: 1rem;
}
nav ul li:first-child {
  border-top: none;
}
nav ul li:hover a {
  color: white;
  background-color: #6d747e;
  transition: all 0.3s ease-out;
}
nav ul li:hover a i {
  color: white;
}

.navBtn:checked ~ nav {
  transform: translateX(0);
  transition: all 0.3s ease-out;
}

.navBtn:checked ~ nav ul li {
  opacity: 1;
  transform: translateX(0);
  transition: all 0.6s ease-out;
}

.navBtn {
  display: none;
}
</style>

?
To change the width of a CSS style in a Blazor program without using JavaScript, you can use the following code:

First, create a CSS file with the style you want to change. In this example, we'll create a file called "mystyle.css" with a c
lass called "myclass" that sets the width to 200px:


.myclass {
  width: 200px;
}



Next, create a Blazor component called "WidthChanger" that contains a text box to enter a new width value and a button to apply the new value. Here's the code for the component:



@page "/width-changer"

<style>
  @import "mystyle.css";
</style>

<h1>Width Changer</h1>

<label for="width-input">New Width:</label>
<input type="text" id="width-input" @bind-value="newWidth" />

<button @onclick="ChangeWidth">Apply</button>

<div class="myclass" style="@style">This is a test element.</div>

@code {
  private string newWidth = "";
  private string style = "";

  private void ChangeWidth()
  {
    if (int.TryParse(newWidth, out int result))
    {
      StyleBuilder styleBuilder = new StyleBuilder();
      styleBuilder.Width(result, StyleUnit.Pixel);
      StyleRenderer styleRenderer = new StyleRenderer();
      style = styleRenderer.BuildStyle(styleBuilder);
    }
  }
}



This component imports the "mystyle.css" file, which contains the "myclass" style we want to change.
The component also contains a text box with a bound value to store the new width entered by the user,
and a button with an "onclick" event that calls the "ChangeWidth" method when clicked.

In the code section of the component, we define a string variable called "newWidth" that will store
the new width entered by the user. The "ChangeWidth" method first checks if the new width value can
be parsed to an integer. If it can, the method uses the Blazor "StyleBuilder" and "StyleRenderer"
classes to create a new style with the specified width value. The new style is then stored in the
"style" variable.

Finally, we add a test element with the "myclass" class to the component, and bind the "style" variable
to its "style" attribute using Blazor's built-in "style" attribute. This allows us to see the updated
style in action when we enter a new width value and click the "Apply" button in the WidthChanger component.

That's it! Now when you enter a new width value in the text box and click the "Apply" button in the
WidthChanger component, the width of the test element with the "myclass" class will be updated to the new value.


